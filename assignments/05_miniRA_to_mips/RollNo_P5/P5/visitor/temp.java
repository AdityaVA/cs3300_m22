//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.awt.Stroke;
import java.util.*;

import javax.print.DocFlavor.STRING;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	String destReg;
	int inArgs, outArgs;
	boolean printLabel;
	int cur_arg;
   boolean isInt(String s) {
      if(s == null) return false;
      if('0'<=s.charAt(0) && s.charAt(0)<='9') return true;
      else return false;
   }
   boolean isReg(String s ) {
      if(s == null) return false;
      if(s.charAt(0)=='$') return true;
      else return false;
   }
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      System.out.println("\t.text\n\t.globl main");
      System.out.println("main:");
      System.out.println("\tmove $fp, $sp");
      System.out.println("\tsw $ra, -4($fp)");
      n.f0.accept(this, null);
      n.f1.accept(this, null);
      String argc = (String)n.f2.accept(this, null);
      int x = Integer.parseInt(argc);
      x= Math.max(x-4, 0);
      cur_arg = Integer.parseInt(argc);
      n.f3.accept(this, null);
      n.f4.accept(this, null);
      String max_stack = (String)n.f5.accept(this, null);
      
      n.f6.accept(this, null);
      n.f7.accept(this, null);
      String max_arg = (String)n.f8.accept(this, null);
      
      n.f9.accept(this, null);
      
      System.out.println("\tsubu $sp, $sp, "+(4*(Integer.parseInt(max_stack)-x+Integer.parseInt(max_arg)+1))); // ra, st space, args
      n.f10.accept(this, null);
      System.out.println("\tlw $ra, -4($fp)");
      System.out.println("\taddu $sp, $sp, "+(4*(Integer.parseInt(max_stack)-x+Integer.parseInt(max_arg)+1))); // ra, st space, args
     
      
      n.f11.accept(this, null);
      System.out.println("\tjr $ra");
      n.f12.accept(this, null);
      n.f13.accept(this, null);
      n.f14.accept(this, null);
      System.out.print("\n\t.text\n\t.globl _halloc\n_halloc:\n\tli $v0, 9\n\tsyscall\n\tj $ra\n\n\t.text\n\t.globl _print\n_print:\n\tli $v0, 1\n\tsyscall\n\tla $a0, newl\n\tli $v0, 4\n\tsyscall\n\tj $ra\n\n\t.data\n\t.align   0\nnewl:    .asciiz \"\\n\" \n\t.data\n\t.align   0\nstr_er:  .asciiz \" ERROR: abnormal termination\\n\" \n");
      
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      printLabel = true;
      n.f0.accept(this, (A)"label");
      printLabel = false;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String label = (String)n.f0.accept(this, null);
      System.out.println("\t.text\n\t.globl "+label);
      System.out.print(label+":\n");
      System.out.println("\tsw $fp, -8($sp)");
      System.out.println("\tmove $fp, $sp");
      System.out.println("\tsw $ra, -4($fp)");
      n.f1.accept(this, null);
      String argc =(String)n.f2.accept(this, null);
      int x = Integer.parseInt(argc);
      cur_arg = x;
      x= Math.max(x-4, 0);
      n.f3.accept(this, null);
      n.f4.accept(this, null);
      String max_stack=(String)n.f5.accept(this, null);
      n.f6.accept(this, null);
      n.f7.accept(this, null);
      String max_arg =(String)n.f8.accept(this, null);
      n.f9.accept(this, null);
      
      System.out.println("\tsubu $sp, $sp, "+(4*(Integer.parseInt(max_stack)-x+Integer.parseInt(max_arg)+1))); // ra, st space, args
      n.f10.accept(this, null);
      System.out.println("\tlw $ra, -4($fp)");
      System.out.println("\taddu $sp, $sp, "+(4*(Integer.parseInt(max_stack)-x+Integer.parseInt(max_arg)+1))); // ra, st space, args
      System.out.println("\tlw $fp, -8($fp)");

      n.f11.accept(this, null);
      n.f12.accept(this, null);
      
      System.out.println("\tjr $ra");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      printLabel = false;
      n.f0.accept(this, null);
      printLabel = true;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      System.out.println("\tnop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      System.out.println("\tb str_er");    
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String r = (String)n.f1.accept(this, null);
      String label = (String)n.f2.accept(this, null);
      System.out.println("\tbeqz "+r + " "+label);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String label = (String)n.f1.accept(this, null);
      System.out.println("\tb "+label);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String r1 = (String) n.f1.accept(this, null);
      String num = (String)n.f2.accept(this, null);
      String r2 = (String)n.f3.accept(this, null);
      
      
      System.out.println("\tsw " + r2+ ", " + num + "(" + r1 + ")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String r1 = (String) n.f1.accept(this, null);
      String r2 = (String)n.f2.accept(this, null);
      String num = (String)n.f3.accept(this, null);
      
      System.out.println("\tlw " + r1+ ", " + num + "(" + r2 + ")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String reg = (String)n.f1.accept(this, null); 
      R exp = n.f2.accept(this, null);
      if(n.f2.f0.which == 1)
      {
         ArrayList<String> x = (ArrayList<String>)exp;
         System.out.println("\t"+x.get(0) + " " + reg + ", " + x.get(1)+ ", " + x.get(2));
      }
      else
      {
         String x = (String)exp;
         if(isInt(x))
         {
            System.out.println("\tli " + reg + ", " + x);
         }
         else if(isReg(x))
         {
            System.out.println("\tmove " + reg + ", " + x);
         }
         else
         {
            System.out.println("\tla " + reg + ", " + x);
         }
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String exp = (String) n.f1.accept(this, null);
      String x = (String)exp;
      String reg = "$a0";
      if(isInt(x))
      {
         System.out.println("\tli " + reg + ", " + x);
      }
      else if(isReg(x))
      {
         System.out.println("\tmove " + reg + ", " + x);
      }
      System.out.println("\tjal _print");
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String reg = (String)n.f1.accept(this, null);
      System.out.print("\tlw "+reg+ " ");
      String spill = (String)n.f2.accept(this, null);
      int s = Integer.parseInt(spill);
      int x=s;
      if(cur_arg>4)
      {
         x = s-(cur_arg-4);
      }
      if(s < cur_arg-4)
    	  System.out.print((s*4) + " ($fp)\n");
      else
         System.out.print((-12-x*(4)) + " ($fp)\n"); //-12 as ra and fp are stored
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String spill = (String)n.f1.accept(this, null);
      String reg = (String)n.f2.accept(this, null);
      System.out.print("\tsw " + reg + " ");
      int s = Integer.parseInt(spill);
      int x=s;
      if(cur_arg>4)
      {
         x = s-(cur_arg-4);
      }
      if(s < cur_arg-4)
    	  System.out.print((s*4) + " ($fp)\n");
      else
         System.out.print((-12-x*(4)) + " ($fp)\n"); //-12 as ra and fp are stored
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String num = (String)n.f1.accept(this, null);
      String reg = (String)n.f2.accept(this, null);
      int r = Integer.parseInt(num);
      System.out.println("\tsw " + reg + ", " + ((r-1)*4) + "($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String exp = (String)n.f1.accept(this, null);
      if(n.f1.f0.which == 0)
    	  System.out.println("\tjalr "+exp);
      else if(n.f1.f0.which == 2)
         System.out.println("\tjal "+exp);
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, null);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String exp = (String)n.f1.accept(this, null);
      if(isInt(exp))
      {
         System.out.println("\tli $a0, " + exp);
      }
      else
      {
         System.out.println("\tmove $a0, " + exp);
      }
      System.out.println("\tjal _halloc");
      _ret = (R)"$v0";
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String op = (String) n.f0.accept(this, null);
      String r1 = (String) n.f1.accept(this, null);
      String r2 = (String) n.f2.accept(this, null);
      ArrayList<String> x = new ArrayList<String>();
      x.add(op);
      x.add(r1);
      x.add(r2);
      return (R)x;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      switch(n.f0.which) {
         case 0:
            return (R)"sle";   
         case 1:
            return (R)"sne";
         case 2:
            return (R)"add";
         case 3:
            return (R)"sub";
         case 4:
            return (R)"mul";
         case 5:
            return (R)"div";
      }
      return _ret;
      
      
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      _ret = n.f1.accept(this, null);
      return _ret;
      
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, null);
      
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      _ret = (R)("$" +(String)n.f0.accept(this, null));
      
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, null);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, null);
      if(argu!=null)
      {
         if(argu.equals("label"))
         {
            System.out.println((String)_ret+":");
         }
      }
      return _ret;
      
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String com= (String) n.f1.accept(this, null);
      return (R)(";" + com);
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, null);
      return _ret;
   }

}
