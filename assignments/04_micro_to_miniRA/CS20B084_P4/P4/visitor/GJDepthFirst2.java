//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import visitor.components.*;

//import jdk.nashorn.internal.codegen.SpillObjectCreator;



/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst2<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   HashMap<String, Function> FuncTable = test.FuncTable;
   String fname;
   Function currFunc;
   StmtNode currNode;
   boolean v0= true, call = false;
   int arg_ind = 0;
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //function declaration
   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      fname = (String) n.f0.accept(this, null);     
      currFunc = FuncTable.get(fname);
      currFunc.maxStackSpace += 8; 
      currFunc.maxStackSpace += 10;
      if(currFunc.maxArgs==-1)
      {
         currFunc.maxStackSpace -= 10; 
         currFunc.maxArgs = 0;
      }
      System.out.printf("%s [ %d ] [ %d ] [ %d ]\n", fname, currFunc.args, currFunc.maxStackSpace, currFunc.maxArgs);
      n.f1.accept(this, null);   
      n.f3.accept(this, null);
      n.f4.accept(this, null);
      return _ret;
   }

//
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      // System.err.println(60);
      fname = "MAIN";
      currFunc = FuncTable.get(fname);
      currFunc.maxStackSpace += 10;
      if(currFunc.maxArgs==-1)
      {
         currFunc.maxStackSpace -= 10; 
         currFunc.maxArgs = 0;
      }
      System.out.printf("%s [ %d ] [ %d ] [ %d ]\n", fname, currFunc.args, currFunc.maxStackSpace, currFunc.maxArgs);
      n.f0.accept(this, null);
      n.f1.accept(this, null);
      n.f2.accept(this, null); 
      System.out.println("END");
      if(currFunc.spilledMap.isEmpty())
      {
         System.out.println("//NOTSPILLED");
      }    
      else
      {
         System.out.println("//SPILLED");
      }
      n.f3.accept(this, null);
      n.f4.accept(this, null);      
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, (A)"label");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;  
      n.f0.accept(this, null);  
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      System.out.println("ERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String reg = (String)n.f1.accept(this, (A)"read");
      String lbl = (String)n.f2.accept(this, null);
      System.out.println("CJUMP " + reg + " " +fname+ lbl);
      v0 = true;
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */

   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String label = (String)n.f1.accept(this, null);
      System.out.println("JUMP "+fname + label);
      
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String t0 = (String)n.f1.accept(this, (A)"read");
      String t1 = (String)n.f2.accept(this, null);
      String t2 = (String)n.f3.accept(this, (A)"read");
      System.out.println("HSTORE "+ t0 + " " + t1 + " " + t2);
      v0 = true;
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String r2 = (String) n.f2.accept(this, (A)"read");
      String off = (String) n.f3.accept(this, null);
      System.out.println("HLOAD v1" + " " + r2 + " " + off);
      String r = (String)n.f1.accept(this, (A)"v1");
      if(r.charAt(0) != 'v')
         System.out.println("MOVE " + r + " v1");
      v0 = true;
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String r1 = (String) n.f2.accept(this, (A)"read");
      
      System.out.println("MOVE a0 "+ r1);
      String r =(String)n.f1.accept(this, (A)"a0");

      if(r.charAt(0)!='v')
      {
         System.out.println("MOVE " + r + " " + r1);
      }

      v0 = true;
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String r = (String) n.f1.accept(this, (A)"read"); 
      System.out.println("PRINT " +r);  
      v0 = true;   
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      for (int i = 0; i < 8; i++) {
         System.out.println("ASTORE SPILLEDARG " + (currFunc.stackPointer + i) + " s" + i);
      }
      for(int i = 0;  i < currFunc.args; i++) {
         if(i == 4)
				break;
			if(currFunc.spilledMap.containsKey(i)) {
				System.out.println("ASTORE SPILLEDARG " + currFunc.spilledMap.get(i) + " a"+i);
			}
			else {
				if(currFunc.regMap.containsKey(i)) {
					System.out.println("MOVE "+ currFunc.regMap.get(i) + " a"+i);
				}
			}
		}
      currFunc.stackPointer = currFunc.stackPointer + 8;
      n.f0.accept(this, null);
      n.f1.accept(this, null);
      n.f2.accept(this, null);
      String ret = (String) n.f3.accept(this, (A)"read");
      System.out.println("MOVE v0 " + ret);
      n.f4.accept(this, null);
      for (int i = 0; i < 8; i++) {
         System.out.println("ALOAD s" + i +" SPILLEDARG " + (currFunc.stackPointer -8+ i) );
      }
      currFunc.stackPointer = currFunc.stackPointer - 8;
      System.out.println("END");
      if(currFunc.spilledMap.isEmpty())
      {
         System.out.println("//NOTSPILLED");
      }    
      else
      {
         System.out.println("//SPILLED");
      }
      v0 = true;
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
     
      arg_ind =0;
      for(int i = 0; i < 10; i++) {
         System.out.println("ASTORE SPILLEDARG " + (currFunc.stackPointer + i) + " t" + i);
      }
      currFunc.stackPointer = currFunc.stackPointer + 10;
      n.f0.accept(this, null);
      String callf = (String)n.f1.accept(this, (A)"read");
      n.f2.accept(this, null);
      call = true;
      arg_ind =0;
      n.f3.accept(this, (A)"read");
      call = false;
      n.f4.accept(this, null);
      System.out.println("CALL " + callf);

      for(int i = 0; i < 10; i++) {
         System.out.println("ALOAD t" + i + " SPILLEDARG " + (currFunc.stackPointer - 10 + i));
      }
      currFunc.stackPointer = currFunc.stackPointer - 10;
      v0 = true;
      
      
      _ret = (R)"v0";
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String r1 = (String) n.f1.accept(this, (A)"read");
      v0 = true;
      _ret = (R)("HALLOCATE "+r1);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String op = (String) n.f0.accept(this, null);
      String r1 = (String) n.f1.accept(this, (A)"read");
      String r2 = (String) n.f2.accept(this, (A)"read");
      _ret = (R)(op + " " + r1 + " " + r2);
      v0 = true;
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, null);
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;

      n.f0.accept(this, null);
      String id = (String) n.f1.accept(this, null);
      // System.out.println(id +" "+ argu);
      if(currFunc.regMap.containsKey(Integer.parseInt(id))) {
         _ret =  (R)currFunc.regMap.get(Integer.parseInt(id));
      }
      else {
         if(argu != null) {
            if(argu.equals("read")) {
               System.out.print("ALOAD ");
               if(v0)
               {
                  System.out.print("v0 ");
                  _ret = (R)"v0";
                  v0 = false;
               }
               else
               {
                  System.out.print("v1 ");
                  _ret = (R)"v1";
               }
               System.out.print("SPILLEDARG " + currFunc.spilledMap.get(Integer.parseInt(id)));
            }
            else  {
               _ret = (R)"v1";
               System.out.print("ASTORE SPILLEDARG " +currFunc.spilledMap.get(Integer.parseInt(id))+" "+argu);
            }
         }
         
         System.out.println();
      }
      if(call)
      {
         if(arg_ind<4)
         {
            System.out.println("MOVE " +"a"+arg_ind + " " + _ret );
         }
         else
         {
            System.out.println("PASSARG " + (arg_ind - 3) + " " + _ret);
         }
         arg_ind++;
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, null);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      R id = n.f0.accept(this, null);
      if(argu!=null)
      {
         if(argu.equals("label"))
         {
            System.out.println(fname  + id );
         }
      }
      return id;
   }
}

