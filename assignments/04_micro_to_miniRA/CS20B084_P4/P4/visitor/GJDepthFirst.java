//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import visitor.components.*;
//import jdk.nashorn.internal.codegen.SpillObjectCreator;

import javax.print.DocFlavor.STRING;



/*
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   HashMap<String, Function> FuncTable = test.FuncTable;
   StmtNode currNode;
   Function currFunc;
   HashMap<String, Integer> labelMap = new HashMap<String, Integer>();
   HashMap<Integer, String> labelCall = new HashMap<Integer, String>();
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //function declaration
   /*
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String fname;
      currFunc = new Function();
      fname = (String) n.f0.accept(this, null);      
      FuncTable.put(fname, currFunc);
      n.f1.accept(this, null);
      int args = Integer.parseInt((String)n.f2.accept(this, null));    
      currFunc.args = args;
      n.f3.accept(this, null);

      test.lineCount=0;
      n.f4.accept(this, null);
      for (Map.Entry<Integer,String> entry : labelCall.entrySet()) 
      {
         int key = entry.getKey();
         String value = entry.getValue();
         // System.err.println(1);
         if(labelMap.containsKey(value))
         {
            int label = labelMap.get(value);
            // System.err.println(2);
            currFunc.nodes.get(key).succ.add(label);
         }

      }
      labelMap.clear();
    	labelCall.clear();
      return _ret;
   }

//
   // User-generated visitor methods below
   //

   /*
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      test.lineCount = 0;
      currFunc = new Function();
      String fname = "MAIN";  
      currFunc.args = 0;    
      FuncTable.put(fname, currFunc);
      
      n.f0.accept(this, null);
      n.f1.accept(this, null);
      n.f2.accept(this, null); 
      
      for (Map.Entry<Integer,String> entry : labelCall.entrySet()) 
      {
         int key = entry.getKey();
         String value = entry.getValue();
         if(labelMap.containsKey(value))
         {
            int label = labelMap.get(value);
            currFunc.nodes.get(key).succ.add(label);
         }

      }
      labelMap.clear();
    	labelCall.clear();
      n.f3.accept(this, null);
      n.f4.accept(this, null);
      return _ret;
   }

   /*
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, (A)"label");
      return _ret;
   }

   /*
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;  
      currNode = new StmtNode();
      currFunc.nodes.add(currNode);
      n.f0.accept(this, null); 
      test.lineCount++;  
      return _ret;
   }

   /*
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      currNode.succ.add(test.lineCount+1);
      return _ret;
   }

   /*
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      return _ret;
   }

   /*
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String tempno = (String) n.f1.accept(this, null);
      String label = (String)n.f2.accept(this, null);
      currNode.use.add(Integer.parseInt(tempno));
      currNode.succ.add(test.lineCount+1);
      labelCall.put(test.lineCount, label);
      return _ret;
   }

   /*
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String label = (String)n.f1.accept(this, null);
      labelCall.put(test.lineCount, label);
      return _ret;
   }

   /*
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String t1 = (String)n.f1.accept(this, null);
      n.f2.accept(this, null);
      String t2 = (String)n.f3.accept(this, null);
      currNode.use.add(Integer.parseInt(t1));
      currNode.use.add(Integer.parseInt(t2));
      currNode.succ.add(test.lineCount+1);
      return _ret;
   }

   /*
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String t1 = (String)n.f1.accept(this, null);
      String t2 = (String)n.f2.accept(this, null);
      currNode.def.add(Integer.parseInt(t1));
      currNode.use.add(Integer.parseInt(t2));
      currNode.succ.add(test.lineCount+1);
      n.f3.accept(this, null);
      return _ret;
   }

   /*
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String t1 = (String) n.f1.accept(this, null);
      n.f2.accept(this, null);
      currNode.def.add(Integer.parseInt(t1));
      currNode.succ.add(test.lineCount+1);
      return _ret;
   }

   /*
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);

      n.f1.accept(this,null); 
      // System.out.println("PRINT" + test.lineCount);
      currNode.succ.add(test.lineCount+1);     
      return _ret;
   }

   /*
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret= n.f0.accept(this, null);
      return _ret;
   }

   /*
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      n.f1.accept(this, null);
      n.f2.accept(this, null);
      currNode = new StmtNode(); //exp node, as will not be included in stmt
      String retexp = (String)n.f3.accept(this, null); 
      currFunc.nodes.add(currNode);
      n.f4.accept(this, null);
      return _ret;
   }

   /*
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, null);
      n.f1.accept(this, null);
      n.f2.accept(this, null);
      int args[] = new int[1];
      args [0]=0;
      n.f3.accept(this,(A) args);
      n.f4.accept(this, null);
      if(currFunc.maxArgs < args[0]) {
         currFunc.maxArgs = args[0];
      }
      return _ret;
   }

   /*
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      n.f1.accept(this, null);
      return _ret;
   }

   /*
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      String t1 = (String) n.f1.accept(this, null);
      currNode.use.add(Integer.parseInt(t1));
      n.f2.accept(this, null);
      return _ret;
   }

   /*
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      return _ret;
   }

   /*
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      int[] flag = new int[1];
      flag[0] = 0;
      String t1 = (String) n.f0.accept(this, (A)flag);

      return _ret;
   }

   /*
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, null);
      _ret = n.f1.accept(this, null);
      // System.err.println((String)_ret + " " + test.lineCount + " " + argu);
      if(argu!=null)
      {
         // System.out.println("hi");
         int args[] = (int[]) argu;
         currNode.use.add(Integer.parseInt((String)_ret));
         args[0]++;
      }
      return _ret;
   }

   /*
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, null);
      return _ret;
   }

   /*
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R id = n.f0.accept(this, null);
      // System.out.println(id + " " + test.lineCount + " " + argu);
      if(argu!=null)
      {
         if(argu=="label")
         labelMap.put((String)id, test.lineCount);
      }
      return id;
   }

}

