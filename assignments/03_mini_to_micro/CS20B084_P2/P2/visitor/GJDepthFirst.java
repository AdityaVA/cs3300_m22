//
// Generated by JTB 1.3.2
//
package visitor;
import syntaxtree.*;
import java.util.*;

import javax.lang.model.element.VariableElement;
import javax.lang.model.type.NullType;
import javax.print.DocFlavor.STRING;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   HashMap<String, ClassData> classes = new HashMap<String, ClassData>();
   HashMap<String, Integer> local_scope = new HashMap<String, Integer>();
   HashMap<String, String> types= new HashMap<String, String>();
   Boolean storing = true, local = true, flag = false;
   String cur_class="", exp_class ="";
   int temp_count=0, label_count=0;
   int var_offset=0, func_offset;
   
   public HashMap<String, Func> copy(HashMap<String, Func> map){
      HashMap<String, Func> new_map = new HashMap<String, Func>();
      for(String key: map.keySet()){
         new_map.put(key, map.get(key));
      }
      return new_map;
   }

   public String genLabel(){
	   label_count++;
	   return "L" + Integer.toString(label_count-1);
   }

	public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      flag= false;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      flag = true;
      storing = false;
      n.f1.accept(this, argu);
      flag = false;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(storing)
      { 
         return _ret;
      }
      else
      {
         System.out.println("MAIN");
         n.f14.accept(this, argu);
         System.out.println("END");
         return _ret;
      }
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
		/* YOUR CODE HERE */
      if(flag)
      {
         return null;
      }
      R _ret=null;
      String id= (String)n.f1.accept(this, null);
      cur_class= id;
      exp_class= id;
      if(storing)
      {
         ClassData class_data = new ClassData();
         class_data.name= id;
         n.f0.accept(this, argu);
         var_offset= 8; //first 4 for parent, second 4 for method table
         func_offset= 0;
         temp_count=1;
         class_data.parent= "";
         n.f3.accept(this, (A)class_data);
         n.f4.accept(this, (A)class_data);
         classes.put(id, class_data);
         return _ret;
      }
        
      else
      {
      
         n.f4.accept(this, null);
      }
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String)n.f1.accept(this, null);
      cur_class = id;
      exp_class = id;
      if(storing)
      {
         ClassData class_data = new ClassData();
         class_data.name = id;
         n.f0.accept(this, argu);
         String parent = (String)n.f3.accept(this, null);
         class_data.parent = parent;
         var_offset= 8; //first 4 for parent, second 4 for method table
         func_offset= 0;
         temp_count= 1;//first for maintaining cur class
         n.f5.accept(this, (A)class_data);
         n.f6.accept(this, (A)class_data);
         classes.put(id, class_data);
         return _ret;
      }  
      else if(flag)
      { 
         ClassData class_data = classes.get(id);
         String parent = id;
         Stack<ClassData> parents = new Stack<ClassData>();

         HashMap< String, Func> methods = new HashMap<String, Func>();
         int off =0;
         // System.out.println("CLASS "+id);
         while(parent!="")
         {
            ClassData cls = classes.get(parent);
            // System.out.print(cls.name+ " ");
            parents.push(cls);
            parent = cls.parent;
         }
         while(!parents.empty())
         {
            ClassData cls = parents.pop();
            
            for (Map.Entry<String,Func> entry : cls.methods.entrySet()) 
            {
               
               if(methods.containsKey(entry.getKey()))
               {
                  methods.get(entry.getKey()).class_name = entry.getValue().class_name;
               }
               else
               {
                  Func f = new Func();
                  f.class_name = entry.getValue().class_name;
                  f.off = off;
                  off+=4;
                  methods.put(entry.getKey(), f);
               }
            }
            
         }
         
         class_data.methods = new HashMap<String, Func>();
         class_data.methods = copy(methods);
         // classes.put(id, class_data);
         parent = id;
         while(parent!="")
         {
            ClassData cls = classes.get(parent);
            // System.out.print(cls.name+ " ");
            parent = cls.parent;
            if(parent == "")
            break;
            ClassData par = classes.get(parent);
            for (Map.Entry<String,Func> entry : cls.methods.entrySet()) 
            {
            
               if(!par.methods.containsKey(entry.getKey()))
               {
                  Func f = new Func();
                  f.class_name = entry.getValue().class_name;
                  f.off = entry.getValue().off;
                  par.methods.put(entry.getKey(), f);
               }
            }
         }
         // System.err.println(cur_class);
         // for(Map.Entry<String, Func> entry : class_data.methods.entrySet())
         // {
         //    System.err.println(entry.getKey() + " " + entry.getValue().class_name + " " + entry.getValue().off);
         // }
         
      }
      else
      {
         n.f6.accept(this, null);
      }
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(storing)
      {
         //only class can call
         String id = (String)n.f1.accept(this, null);
         String type = (String)n.f0.accept(this, argu);
         ClassData class_data = (ClassData)argu;
         class_data.variables.put(id, var_offset);
         class_data.types.put(id, type);
         var_offset+= 4;
      }
      else
      {
         //method can call
         String id = (String)n.f1.accept(this, argu);
         String type = (String)n.f0.accept(this, argu);
         local_scope.put(id, temp_count);
         types.put(id, type);
         temp_count++;
      }
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      var_offset = 0;
      types = new HashMap<String, String>();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String id = (String)n.f2.accept(this, null);
      ClassData class_data = (ClassData)argu;
      if(storing)
      {
        
         class_data.methods.put(id, new Func(cur_class, func_offset));
         // System.err.println(id + " " +func_offset);
         func_offset+= 4;
         return _ret;
      }
      else
      {
         
         System.out.print("\n"+cur_class+"_"+id+"[");
         n.f3.accept(this, argu);
         temp_count = 1;
         n.f4.accept(this, argu);
         int args=temp_count;
         System.out.print(args+"]\n");
         System.out.println(" BEGIN");
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         
         n.f9.accept(this, argu);
         String ret = (String)n.f10.accept(this, argu);
         System.out.println(" RETURN "+ret);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         System.out.println(" END");
         local_scope.clear();
      }
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
		/* YOUR CODE HERE */
      //add to local scope
      R _ret=null;
      //enters here only when !storing
      String id = (String)n.f1.accept(this, null);
      String type = (String)n.f0.accept(this, argu);
      local_scope.put(id, temp_count);
      types.put(id, type);
      temp_count++;
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      return n.f0.accept(this, null);
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)(new String("int[]"));
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      return (R)(new String("boolean"));
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      return (R)(new String("int"));
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      if(!storing)
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
		/* YOUR CODE HERE */
      R _ret=null;
      if(!storing)
      {
         _ret=null;
         String id = (String)n.f0.accept(this, null);
         //identifier should return index in variable table or the register
         //including multipe hload
         //last hload is the required class
         String exp = (String) n.f2.accept(this, argu);
         if(local_scope.containsKey(id))
         {
            id = "TEMP "+local_scope.get(id);
            System.out.println(" MOVE " + id + " " + exp);
            types.put(id,exp_class);
         }
         else
         {
            ClassData class_data = classes.get(cur_class);
            int cls=0;
            while(true)
            {
               if(class_data.variables.containsKey(id))
               {
                  System.out.println(" HSTORE TEMP "+cls+" "+class_data.variables.get(id)+" "+exp);
                  class_data.types.put(id,exp_class);
                  
                  break;
               }
               System.out.println(" HLOAD TEMP "+temp_count+" TEMP "+cls+" 0");
               cls= temp_count;
               temp_count++;
               class_data = classes.get(class_data.parent);
            }
            
         }
         
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String id = (String)n.f0.accept(this, null);
      String off = (String)n.f2.accept(this, argu);
      String exp = (String)n.f5.accept(this, argu);
      if(local_scope.containsKey(id))
      {
         id = "TEMP "+local_scope.get(id);
         int len = temp_count;
         System.out.println(" HLOAD TEMP " + len + " "+ id + " 0");
         temp_count++;
         String no_err = genLabel();
         System.out.println(" MOVE TEMP "+ temp_count +" LE TEMP "+ len+" "+ off);
         System.out.println(" CJUMP TEMP " + temp_count +" "+ no_err);
         System.out.println(" ERROR");
         System.out.println(no_err ); 
         System.out.println(" MOVE TEMP "+ temp_count +" TIMES "+ off + " 4");
         System.out.println(" MOVE TEMP "+ temp_count +" PLUS TEMP "+ temp_count + " 4");
         System.out.println(" MOVE TEMP "+ temp_count +" PLUS TEMP "+ temp_count +" "+ id);
         System.out.println(" HSTORE TEMP "+ temp_count +  " 0 "+ exp);
         temp_count++;
      }
      else
      {
         ClassData class_data = classes.get(cur_class);
         int cls=0;

         while(true)
         {
            if(class_data.variables.containsKey(id))
            {
               int arr_off = class_data.variables.get(id);
               int arr = temp_count;
               System.out.println(" HLOAD TEMP " +arr+ " TEMP "+cls+" "+arr_off);
               temp_count++;
               int len = temp_count;
               System.out.println(" HLOAD TEMP " + len  + " TEMP " + arr + " 0");
               temp_count++;
               String no_err = genLabel();
               System.out.println(" MOVE TEMP "+ temp_count +" LE TEMP "+ len+" "+ off);
               System.out.println(" CJUMP TEMP " + temp_count +" "+ no_err);
               System.out.println(" ERROR");
               System.out.println(no_err ); 
               System.out.println(" MOVE TEMP "+ temp_count +" TIMES "+ off + " 4");
               System.out.println(" MOVE TEMP "+ temp_count +" PLUS TEMP "+ temp_count + " 4");
               System.out.println(" MOVE TEMP "+ temp_count +" PLUS TEMP "+ temp_count +" TEMP "+ arr);
               temp_count++;
               System.out.println(" HSTORE TEMP "+(temp_count-1)+ " 0 " +exp);
               break;
            }
            System.out.println(" HLOAD TEMP "+temp_count+" TEMP "+cls+" 0");
            cls= temp_count;
            temp_count++;
            class_data = classes.get(class_data.parent);
         }
      }

      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String false_label = genLabel();
   
      String exp = (String)n.f2.accept(this, argu);
      System.out.println(" CJUMP " + exp + " " + false_label);
      n.f4.accept(this, argu);
      System.out.println(false_label);
      System.out.println(" NOOP");
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String false_label = genLabel();
      String end_label = genLabel();
      String exp = (String)n.f2.accept(this, argu);
      System.out.println(" CJUMP " + exp + " " + false_label);
      n.f4.accept(this, argu);
      System.out.println(" JUMP "+end_label);
      System.out.println(false_label);
      n.f6.accept(this, argu);
      System.out.println(end_label);
      System.out.println(" NOOP");
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String true_label = genLabel();
      String false_label   = genLabel();
      String while_label = genLabel();
      System.out.println(while_label);
      String exp = (String)n.f2.accept(this, argu);
      System.out.println(" CJUMP " + exp + " " + false_label);
      n.f4.accept(this, argu);
      System.out.println(" JUMP " + while_label );
      System.out.println(false_label);
      System.out.println(" NOOP");
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      System.out.println(" PRINT " + n.f2.accept(this, argu));
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String false_label = genLabel();
      String end_label = genLabel();
      String exp1 =(String) n.f0.accept(this, argu);
      System.out.println(" CJUMP " + exp1 + " " + false_label);
      String exp2 =(String) n.f2.accept(this, argu);
      System.out.println(" CJUMP " + exp2 + " " + false_label);
      System.out.println(" MOVE TEMP " + temp_count + " 1");
      System.out.println(" JUMP "+ end_label);
      System.out.println(false_label);
      System.out.println(" MOVE TEMP " + temp_count + " 0");
      System.out.println(end_label);
      System.out.println(" NOOP");
      _ret = (R)("TEMP "+temp_count);
      temp_count++;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String true_label = genLabel();
      String end_label = genLabel();
      String exp1 =(String)n.f0.accept(this, argu);
      System.out.println(" MOVE TEMP " + temp_count + " 1 " );
      System.out.println(" MOVE TEMP "+temp_count+" MINUS TEMP " + temp_count + " "+ exp1 );
      System.out.println(" CJUMP TEMP " + temp_count+" " + true_label);
      n.f1.accept(this, argu);
      String exp2 =(String)n.f2.accept(this, argu);
      System.out.println(" MOVE TEMP " + temp_count + " 1 " );
      System.out.println(" MOVE TEMP "+temp_count+" MINUS TEMP " + temp_count + " "+ exp2 );
      System.out.println(" CJUMP TEMP " + temp_count+" " + true_label);
      System.out.println(" MOVE TEMP " + temp_count + " 0");
      System.out.println(" JUMP "+ end_label);
      System.out.println(true_label);
      System.out.println(" MOVE TEMP " + temp_count + " 1");
      System.out.println(end_label);
      System.out.println(" NOOP");
      _ret = (R)("TEMP "+temp_count);
      temp_count++;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String exp1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String)n.f2.accept(this, argu);
      System.out.println(" MOVE TEMP "+ temp_count +" LE "+ exp1 + " " + exp2);
      _ret = (R)("TEMP "+temp_count);
      temp_count++;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String exp1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String)n.f2.accept(this, argu);
      System.out.println(" MOVE TEMP "+ temp_count +" NE "+ exp1 + " " + exp2);
      _ret = (R)("TEMP "+temp_count);
      temp_count++;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String exp1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String)n.f2.accept(this, argu);
      System.out.println(" MOVE TEMP "+ temp_count +" PLUS "+ exp1 + " " + exp2);
      _ret = (R)("TEMP "+temp_count);
      temp_count++;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String exp1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String)n.f2.accept(this, argu);
      System.out.println(" MOVE TEMP "+ temp_count +" MINUS "+ exp1 + " " + exp2);
      _ret = (R)("TEMP "+temp_count);
      temp_count++;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String exp1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String)n.f2.accept(this, argu);
      System.out.println(" MOVE TEMP "+ temp_count +" TIMES "+ exp1 + " " + exp2);
      _ret = (R)("TEMP "+temp_count);
      temp_count++;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String exp1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String exp2 = (String)n.f2.accept(this, argu);
      System.out.println(" MOVE TEMP "+ temp_count +" DIV "+ exp1 + " " + exp2);
      _ret = (R)("TEMP "+temp_count);
      temp_count++;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String arr = (String)n.f0.accept(this, argu);
      int len = temp_count;
      System.out.println(" HLOAD TEMP " + len  +" "+ arr + " 0");
      temp_count++;
      String off = (String)n.f2.accept(this, argu);
      String no_err = genLabel();
      System.out.println(" MOVE TEMP "+ temp_count +" LE TEMP "+ len+" "+ off);
      System.out.println(" CJUMP TEMP " + temp_count +" "+ no_err);
      System.out.println(" ERROR");
      System.out.println(no_err );
      System.out.println(" MOVE TEMP "+ temp_count +" TIMES "+ off + " 4");
      System.out.println(" MOVE TEMP "+ temp_count +" PLUS TEMP "+ temp_count + " 4");
      System.out.println(" MOVE TEMP "+ temp_count +" PLUS TEMP "+ temp_count +" " + arr);
      temp_count++;
      System.out.println(" HLOAD TEMP "+ temp_count + " TEMP "+(temp_count-1) +" 0 "  );  
      _ret = (R)("TEMP "+temp_count);
      temp_count++;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String arr= (String)n.f0.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println(" HLOAD TEMP "+ (temp_count) +" "+arr+ " 0 ");
      _ret = (R)("TEMP "+temp_count);
      temp_count++;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      int func_table = temp_count;
      temp_count++;
      String exp = (String)n.f0.accept(this, argu);
      // System.err.println(exp);
      int out = temp_count;
      temp_count++;
      System.out.println(" HLOAD TEMP " + func_table + " " + exp + " 4");
      // System.err.println(exp_class);
      // ClassData cls = classes.get(exp_class);
      String temp = exp_class;
      String func_id = (String)n.f2.accept(this, null);
      
      
      ArrayList<String> args = new ArrayList<String>();
      n.f4.accept(this,(A) args);
      exp_class = temp;
      ClassData cls = classes.get(exp_class);
      int off = cls.methods.get(func_id).off;
      System.err.println(func_id);
      System.out.println(" HLOAD TEMP " + temp_count + " TEMP " + func_table + " " + off);
      System.out.print(" MOVE TEMP " + out + " CALL TEMP "+temp_count+" (") ;
      temp_count++;
      System.out.print(" " + exp + " ");
      for(int i=0;i<args.size();i++){
         System.out.print(args.get(i)+ " ");
      }
      System.out.print(")\n");
      _ret = (R)("TEMP "+out);
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      ArrayList<String> args = (ArrayList<String>)argu;
      String exp = (String)n.f0.accept(this, argu);
      // System.err;
      args.add(exp);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      ArrayList<String> args = (ArrayList<String>)argu;
      String exp = (String)n.f1.accept(this, argu);
      args.add(exp);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      // System.err.println(cur_class);
      // ClassData struc = classes.get(cur_class);
      // for (Map.Entry<String,Func> entry : struc.methods.entrySet()) 
      // {
      //    System.err.println(entry.getValue().class_name+" "+ entry.getValue().off+" "+entry.getKey());
      // }
      return n.f0.accept(this, (A)"prexp");
      
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String int_field=(String)  n.f0.accept(this, argu);
      System.out.println(" MOVE TEMP "+temp_count+" "+int_field);
      temp_count++;
      return (R)("TEMP "+(temp_count-1));
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" MOVE TEMP "+temp_count+" 1");
      temp_count++;
      return (R)("TEMP "+(temp_count-1));
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" MOVE TEMP "+temp_count+" 0");
      temp_count++;
      return (R)("TEMP "+(temp_count-1));
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String id= (String) n.f0.accept(this, argu);
      _ret = (R)id;
      if(types.containsKey(id))
      {
         exp_class = types.get(id);
      }
      else
      {
         ClassData cls = classes.get(cur_class);
         while(true)
         {
            if(cls==null)
            {
               break;
            }
            if(cls.types.containsKey(id))
            {
               exp_class = cls.types.get(id);
               break;
            }
            cls= classes.get(cls.parent);
         }
      }
      if(!(argu==null))
      {
         if(argu.equals("prexp"))
         {
            if(local_scope.containsKey(id))
            {
               id = "TEMP "+local_scope.get(id);
               return (R)id;
            }
            else
            {
               ClassData class_data = classes.get(cur_class);
               int cls=0;
               while(true)
               {
                  if(class_data.variables.containsKey(id))
                  {
                     System.out.println(" HLOAD TEMP "+temp_count+" TEMP "+cls+" "+class_data.variables.get(id));
                     _ret = (R)("TEMP " +temp_count);
                     temp_count++;

                     break;
                  }
                  System.out.println(" HLOAD TEMP "+temp_count+" TEMP "+cls+" 0");
                  cls= temp_count;
                  temp_count++;
                  class_data = classes.get(class_data.parent);
               }
               
            }
         }
      }
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      exp_class = cur_class;
      // System.out.println("THIS EXPRESSION "+cur_class);
      n.f0.accept(this, argu);
      return (R)"TEMP 0";
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String exp = (String) n.f3.accept(this, argu);
      int new_arr = temp_count;
      temp_count++;
      //array creation
      System.out.println(" MOVE TEMP "+ temp_count+" PLUS " + exp + " 1");
      System.out.println(" MOVE TEMP "+ temp_count+" TIMES " + exp + " 4");
      temp_count++;
      System.out.println(" MOVE TEMP "+ new_arr+" HALLOCATE TEMP " + (temp_count-1) );
      //array size store
      System.out.println(" HSTORE TEMP " + new_arr + " 0 " + exp + " ");
      n.f4.accept(this, argu);
      return (R)(" TEMP "+ new_arr);
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
		/* YOUR CODE HERE */

     R _ret=null;
     String id = (String)n.f1.accept(this, null);
	  exp_class = id;
    
     int c=0;
     if(storing)
     {
      System.out.println("lol");
      return null;
     }
     
     _ret = (R)("TEMP "+(temp_count+1));
     while(true)
     {
         if(id.equals(""))
         {
            System.out.println(" MOVE TEMP "+ (temp_count+1) + " 0");
            System.out.println(" HSTORE TEMP " + (temp_count-1) + " 0 TEMP " + (temp_count+1)); //parent
            temp_count++;
            break;
         }
         ClassData struct = classes.get(id);
         System.out.println(" MOVE TEMP " + (temp_count) + " HALLOCATE " + (struct.methods.size()) * 4);
         // ClassData struc = classes.get(id);
         // System.err.println(id);
         // for (Map.Entry<String,Func> entry : struc.methods.entrySet()) 
         // {
         //    System.err.println(entry.getValue().class_name+" "+ entry.getValue().off+" "+entry.getKey());
         // }
         for (Map.Entry<String,Func> entry : struct.methods.entrySet()) 
         {
            System.out.println(" MOVE TEMP "+ (temp_count+1) + " " + entry.getValue().class_name+"_"+entry.getKey());
            System.out.println(" HSTORE TEMP " + (temp_count) + " " + entry.getValue().off + " TEMP " + (temp_count+1));
         }
         System.out.println(" MOVE TEMP " + (temp_count+1) + " HALLOCATE " + (struct.variables.size()+2) * 4);
         System.out.println(" HSTORE TEMP " + (temp_count+1) + " 4 TEMP " + temp_count);
         if(c!=0)
         {
            System.out.println(" HSTORE TEMP " + (temp_count-1) + " 0 TEMP " + (temp_count+1)); //parent
         }
         temp_count+=2;
         c++;
         id = struct.parent;
     }
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      String exp = (String)n.f1.accept(this, argu);
      System.out.println(" MOVE TEMP " + temp_count + " 1 " );
      System.out.println(" MOVE TEMP " + temp_count + " MINUS TEMP " +temp_count + exp );
      temp_count++;
      return (R)("TEMP "+(temp_count-1));
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
		/* YOUR CODE HERE */

      return n.f1.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}

class ClassData{
   //(var+2)*4 bytes
   public String name="";
   public String parent="";
   public HashMap<String, Func> methods = new HashMap<String, Func>();
   public HashMap<String, Integer> variables = new HashMap<String, Integer>();//to store offsets
   public HashMap<String, String> types = new HashMap<String, String>();
   public ClassData(){
   }
}

class Func{
   public String class_name="";
   public int off = 0;
   public Func(){
   }
   public Func(String class_name, int off){
      this.class_name = class_name;
      this.off = off;
   }  
}